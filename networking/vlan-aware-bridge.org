#+OPTIONS: toc:2

* Virtual Networks on a VLAN Aware Bridge
This example demonstrates how to create a VLAN aware bridge, VLAN trunk uplink, and virtual interfaces with systemd-networkd. It is assumed that systemd-networkd is installed and enabled on the host and guest VM.

** Host
*** Create a VLAN aware bridge.
    
No DefualtPVID for untagged frames is specified for security.

~/etc/systemd/network/vlan-bridge.netdev~

#+begin_src /etc/systemd/network/vlan-bridge.netdev
[NetDev]
Name=vlan-bridge
Kind=bridge

[Bridge]
VLANFiltering=1
DefaultPVID=none
#+end_src

~/etc/systemd/network/vlan-bridge.network~

#+begin_src /etc/systemd/network/vlan-bridge.network
[Match]
Name=vlan-bridge

[BridgeVLAN]
VLAN=2
#+end_src

*** Create a VLAN trunk uplink interface.
    
The PHY ~eno1~ is enslaved to the bridge and tagged with an 802.1Q VLAN.

~/etc/systemd/network/eno1.network~

#+begin_src /etc/systemd/network/eno1.network
[Match]
Name=eno1

[Network]
Bridge=vlan-bridge

[BridgeVLAN]
VLAN=2
#+end_src

*** Create a tap interface.
    
The tap virtual interface is enslaved to the bridge and tagged with an 802.1Q VLAN.

~/etc/systemd/network/tap2.netdev~

#+begin_src /etc/systemd/network/tap2.netdev
[NetDev]
Name=tap2
Kind=tap

[Tap]
MultiQueue=yes
PacketInfo=yes
#+end_src

~/etc/systemd/network/tap2.network~

#+begin_src /etc/systemd/network/tap2.network
[Match]
Name=tap2

[Network]
Bridge=vlan-bridge

[BridgeVLAN]
VLAN=2
#+end_src

*** Configure the Virtual Machine to use the tap network interface.

- This method works well with QEMU.

- This method does not work well with virt-manager and libvirt as they do not support 802.1Q tags on a standard linux bridge. See https://libvirt.org/formatnetwork.html for more information. If you must use libvirt you can manually tag VLANs on the interface using the ~bridge vlan~ command, however these settings will not persist on reboot.

~./qemu-vm.sh~

#+begin_src qemu-vm.sh
#!/bin/bash
exec qemu-system-x86_64 \
     -netdev tap,id=tap2,ifname=tap2,script=no,downscript=no \
     -device virtio-net-pci,netdev=tap2 \
#+end_src

** Virtual Machine
*** Configure the VM with a 802.1Q sub-interface.

~/etc/systemd/network/enp1s0.network~

#+begin_src /etc/systemd/network/enp1s0.network
[Match]
Name=enp1s0

[Network]
DHCP=ipv4
VLAN=enp1s0.2
#+end_src

~/etc/systemd/network/enp1s0.2.netdev~

#+begin_src /etc/systemd/network/enp1s0.2.netdev
[NetDev]
Name=enp1s0.2
Kind=vlan

[VLAN]
Id=2
#+end_src

~etc/systemd/network/enp1s0.2.network~

#+begin_src /etc/systemd/network/enp1s0.2.network
[Match]
Name=enp1s0.2

[Network]
DHCP=yes
#+end_src

** Container
Buildiing off the previous example the following demonstrates how to create a macvlan network in a VM to provide network segmentation to containers. It is assumed that podman is installed in the Virtual Machine.

*** Start the CNI DHCP daemon

The CNI DHCP daemon can be used as a DHCP client for the container allowing the container to lease an IP address from a DHCP server.

#+begin_src bash
sudo /usr/libexec/cni/dhcp daemon &
#+end_src 

*** Create a macvlan container network.

The parent interface is the 802.1Q VLAN tagged sub-interface created in the previous example. Podman supports running containers as an unpriveleged user, however the macvlan podman network requires root priveleges, see https://docs.podman.io/en/latest/markdown/podman-network-create.1.html for more information.
    
#+begin_src bash
sudo podman network create -d macvlan -o parent=enp1s0.2 macvlan2
#+end_src

*** Pull a container image.

The darkhttpd Alpine container is used fr validation of container networking, and defaults to serving an empty HTTP page on port 8080.

#+begin_src
sudo podman pull docker.io/alpinelinux/darkhttpd
#+end_src
    
*** Run the container using the macvlan container network.

The command runs and detaches from the darkhttpd Apline container.

#+begin_src bash
sudo podman run -d --net macvlan2 --name=alpine_darkhttpd docker.io/alpinelinux/darkhttpd
#+end_src

*** Validate container network

Obtain the container's IP address.

#+begin_src bash
sudo podman inspect --format '{{.NetworkSettings.Networks.macvlan2.IPAddress }}' alpine_darkhttpd
#+end_src

Use curl to send a HTTP request to the container. The HTTP request can not originate from the VM due to the way the macvlan driver isolates the container's network namespace from the container host network namespace, see https://github.com/moby/libnetwork/blob/master/docs/macvlan.md for more information.

#+begin_src
curl http://x.x.x.x:8080
#+end_src
